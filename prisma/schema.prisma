// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
 url     = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}



model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  thriftSavings     ThriftSavings[]
  categorySavings   CategorySavings[]
  structuredSavings StructuredSavings[]
  loans         Loan[]
  loanRequests  LoanRequest[]
  transactions  Transaction[]
  wallet        Wallet?
  kyc           KYC?
  @@index([id]) 
}

model Session {
  id              String @id @default(cuid())
  userId          String
  token           String
  expiresAt       DateTime
  ipAddress       String
  impersonatedBy  String?
  userAgent       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                      String  @id @default(cuid())
  userId                  String  
  accountId               String
  providerId              String
  accessToken             String?
  refreshToken            String?
  accessTokenExpiresAt    DateTime?
  refreshTokenExpiresAt   DateTime?
  scope                   String?
  password                String?
  idToken                 String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id                     String @id @default(cuid())
  identifier             String
  value                  String
  expiresAt              DateTime
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model ThriftSavingsTracker {
  id              String         @id @default(cuid())
  thriftSavingsId String
  // Relation to the ThriftSavings record (the parent record)
  thriftSavings   ThriftSavings  @relation(fields: [thriftSavingsId], references: [id])
  
  // A field to indicate which week this tracker is for. You can decide how to represent a week,
  // for example by storing the date of the Monday (or any day) of that week.
  weekStart       DateTime
  
  // 7 Boolean fields to mark whether a contribution was made on that day.
  monday          Boolean        @default(false)
  tuesday         Boolean        @default(false)
  wednesday       Boolean        @default(false)
  thursday        Boolean        @default(false)
  friday          Boolean        @default(false)
  saturday        Boolean        @default(false)
  sunday          Boolean        @default(false)
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}



model ThriftSavings {
  id           String         @id @default(cuid())
  userId       String
  user         User           @relation(fields: [userId], references: [id])
  category     ThriftCategory
  currentAmount Decimal        @default(0.0)
  trackers      ThriftSavingsTracker[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model CategorySavings {
  id           String              @id @default(cuid())
  userId       String
  user         User                @relation(fields: [userId], references: [id])
  category     SavingsCategoryType
  amount       Decimal
  startDate    DateTime
  endDate      DateTime
  interestRate Float               @default(5.0)
  status       SavingsStatus       @default(ACTIVE)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
}

model StructuredSavings {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  name          String
  targetAmount  Decimal
  currentAmount Decimal         @default(0.0)
  status        SavingsStatus   @default(ACTIVE)
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model LoanProduct {
  id          String   @id @default(cuid())
  type        LoanType @unique
  interestRate Float
  maxAmount   Decimal
  duration    Int      // Duration in months
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   loans       Loan[]   @relation("LoanToProduct")
}

model Loan {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  product      LoanProduct @relation(name: "LoanToProduct", fields: [loanProductId], references: [id])
  loanProductId String
  amount       Decimal
  amountDue    Decimal
  amountPaid   Decimal    @default(0.0)
  status       LoanStatus @default(PENDING)
  disbursedAt  DateTime?
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([userId])
  @@index([status])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  balance   Decimal  @default(0)
  currency  String   @default("NGN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Transaction {
  id                String                  @id @default(cuid())
  userId            String
  user              User                    @relation(fields: [userId], references: [id])
  amount            Decimal
  type              TransactionType         // e.g., LOAN_DISBURSEMENT, SAVINGS_DEPOSIT, etc.
  status            TransactionStatus       @default(PENDING)
  reference         String?                 @unique
  description       String?
  metadata          Json?
  
  // New fields to capture fund flow details:
  sourceType        TransactionSourceType?  
  sourceId          String?                 // ID of the source account (loan, wallet, savings, etc.)
  destinationType   TransactionDestinationType?
  destinationId     String?                 // ID of the destination account
  
  // Existing optional references (if needed for backward compatibility)
  loanId            String?
  savingsId         String?
  
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  @@index([userId])
  @@index([type])
  @@index([createdAt])
}


model LoanRequest {
  id           String             @id @default(cuid())
  userId       String
  user         User               @relation(fields: [userId], references: [id])
  loanType     LoanType
  amount       Decimal
  duration     Int
  status       LoanRequestStatus  @default(PENDING_REVIEW)
  reason       String?
  reviewedBy   String?
  reviewedAt   DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@index([userId])
  @@index([status])
  @@index([loanType])
}


model KYC {
  id              String           @id @default(cuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id])
  firstName       String
  lastName        String
  number          String
  dob             DateTime
  gender          Gender
  address         String
  state           String
  city            String
  proofOfAddress  String  // URL to uploaded document
  occupation      String
  employer        String
  monthlyIncome   Decimal
  bvn             String  @db.VarChar(11)  // Nigerian BVN is 11 digits
  idType          IdentificationType
  idNumber        String
  idImage         String  // URL to front of ID document
  idSelfie        String  // URL to selfie with ID document
  status          KYCStatus       @default(PENDING) 
  reviewedBy      String?         // Admin ID who reviewed
  reviewedAt      DateTime?
  rejectionReason String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([userId])
  @@index([status])
  @@index([bvn])
  @@index([idNumber])
}

enum ThriftCategory {
  BRONZE
  SILVER
  GOLD
  INFINITY
}

enum LoanType {
  TYPE_1
  TYPE_2
  TYPE_3
}

enum LoanStatus {
  PENDING
  APPROVED
  ACTIVE
  PAID
  DEFAULTED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  LOAN_DISBURSEMENT
  LOAN_REPAYMENT
  SAVINGS_DEPOSIT
  SAVINGS_WITHDRAWAL
}

enum SavingsCategoryType {
  THREE_MONTHS
  SIX_MONTHS
  NINE_MONTHS
}

enum SavingsStatus {
  ACTIVE
  COMPLETED
  WITHDRAWN
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum LoanRequestStatus {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum IdentificationType {
  NATIONAL_ID
  PASSPORT
  DRIVERS_LICENSE
  VOTERS_CARD
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TransactionSourceType {
  LOAN
  WALLET
  THRIFT_SAVINGS
  CATEGORY_SAVINGS
  STRUCTURED_SAVINGS
}

enum TransactionDestinationType {
  LOAN
  WALLET
  THRIFT_SAVINGS
  CATEGORY_SAVINGS
  STRUCTURED_SAVINGS
}
